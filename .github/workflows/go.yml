name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.24"
  DOCKER_REGISTRY: kellerman81
  IMAGE_NAME: go_media_downloader

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
      IS_STABLE: ${{ steps.version.outputs.IS_STABLE }}
      GITHASH: ${{ steps.version.outputs.GITHASH }}
      DATE: ${{ steps.version.outputs.DATE }}

    steps:    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Replaces git fetch --prune --unshallow --tags

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true  # Enable Go module caching

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-mingw-w64 gcc-arm-linux-gnueabihf
    
    - name: Get version and metadata
      id: version
      run: |
        VERSION=$(git describe --exclude latest_develop)
        DATE=$(date +'%Y-%m-%d')
        GITHASH=$(git rev-parse --short HEAD)
        IS_STABLE=$([[ "$VERSION" == v* ]] && echo "true" || echo "false")
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "DATE=$DATE" >> $GITHUB_OUTPUT
        echo "IS_STABLE=$IS_STABLE" >> $GITHUB_OUTPUT   
        echo "GITHASH=$GITHASH" >> $GITHUB_OUTPUT 
    - name: Build binaries
      env:
        VERSION: ${{ steps.version.outputs.VERSION }}
        GITHASH: ${{ steps.version.outputs.GITHASH }}
        BUILD_DATE: ${{ steps.version.outputs.DATE }}
      run: make build-all
    
    - name: Create release packages
      run: |
        # Create packages directory
        mkdir -p packages
        
        # Windows x64
        cp go_media_downloader-windows-amd64.exe go_media_downloader.exe
        cp init_imdb-windows-amd64.exe init_imdb.exe
        zip -r packages/gomedia-windows-x64.zip . \
          -x "*.git*" ".github/*" "pkg/*" "Dockerfile*" "go.*" "*.zip" "*.go" \
             "go_media_downloader-*" "init_imdb-*" "packages/*"
        rm go_media_downloader.exe init_imdb.exe
        
        # Linux x64
        cp go_media_downloader-linux-amd64 go_media_downloader
        cp init_imdb-linux-amd64 init_imdb
        zip -r packages/gomedia-linux-x64.zip . \
          -x "*.git*" ".github/*" "pkg/*" "Dockerfile*" "go.*" "*.zip" "*.go" \
             "go_media_downloader-*" "init_imdb-*" "packages/*"
        rm go_media_downloader init_imdb
        
        # Linux ARM64
        cp go_media_downloader-linux-arm64 go_media_downloader
        cp init_imdb-linux-arm64 init_imdb
        zip -r packages/gomedia-linux-arm64.zip . \
          -x "*.git*" ".github/*" "pkg/*" "Dockerfile*" "go.*" "*.zip" "*.go" \
             "go_media_downloader-*" "init_imdb-*" "packages/*"
        rm go_media_downloader init_imdb
        
        # Linux ARM7
        cp go_media_downloader-linux-arm7 go_media_downloader
        cp init_imdb-linux-arm7 init_imdb
        zip -r packages/gomedia-linux-arm7.zip . \
          -x "*.git*" ".github/*" "pkg/*" "Dockerfile*" "go.*" "*.zip" "*.go" \
             "go_media_downloader-*" "init_imdb-*" "packages/*"
        rm go_media_downloader init_imdb
    
    - name: Upload release packages
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: packages/
        retention-days: 5
  
  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_REGISTRY }}
        password: ${{ secrets.DOCKER }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value=${{ needs.build.outputs.VERSION }}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Go Media Downloader
          org.opencontainers.image.version=${{ needs.build.outputs.VERSION }}
          org.opencontainers.image.revision=${{ needs.build.outputs.GITHASH }}
          org.opencontainers.image.created=${{ needs.build.outputs.DATE }}
    
    - name: Build and push multi-arch Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.build.outputs.VERSION }}
          GITHASH=${{ needs.build.outputs.GITHASH }}
          BUILD_DATE=${{ needs.build.outputs.DATE }}

    - name: Logout from Docker Hub
      run: docker logout
  
  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: packages

    - name: Development Release
      if: ${{ github.event_name == 'push' && needs.build.outputs.IS_STABLE == 'false' }}
      uses: marvinpinto/action-automatic-releases@v1.2.1
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: latest_develop
        title: "Latest development build"
        files: packages/*
          
    - name: Stable Release
      if: ${{ github.event_name == 'push' && needs.build.outputs.IS_STABLE == 'true' }}
      uses: marvinpinto/action-automatic-releases@v1.2.1
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        automatic_release_tag: "${{ needs.build.outputs.VERSION }}"
        title: "${{ needs.build.outputs.VERSION }}"
        files: packages/*